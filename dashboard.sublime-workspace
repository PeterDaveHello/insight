{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"proto",
				"prototype"
			],
			[
				"Labs",
				"LabsDashboard"
			],
			[
				"tool",
				"tooltipLabel"
			],
			[
				"y",
				"yPosition"
			],
			[
				"too",
				"tooltipValue"
			],
			[
				"tooltip",
				"tooltipLabel"
			],
			[
				"mouseo",
				"mouseOut"
			],
			[
				"mouse",
				"mouseOver"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/nstavrakakis/dashboard/test/specs/dev/flickr.spec.js",
			"settings":
			{
				"buffer_size": 948,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/nstavrakakis/dashboard/app/viewmodels/flickr.js",
			"settings":
			{
				"buffer_size": 1520,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/nstavrakakis/dashboard/test/specs/dev/dashboard.spec.js",
			"settings":
			{
				"buffer_size": 539,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*global jasmine, describe, beforeEach, it, expect, require */\ndescribe('viewmodels/welcome', function() {\n    \"use strict\";\n    var Welcome = require('viewmodels/welcome');\n\n    it('should be a constructor function', function() {\n        var a = new Welcome();\n        expect(a.constructor).toEqual(Welcome);\n    });\n\n    describe('instance', function() {\n        var a = new Welcome();\n\n        it('should have a \"displayName\" property', function() {\n            expect(a.displayName).toBeDefined();\n        });\n\n        it('should have a \"description\" property', function() {\n            expect(a.description).toBeDefined();\n        });\n\n        it('should have a \"features\" property', function() {\n            expect(a.features).toBeDefined();\n        });\n\n        it('features should be of type Array', function(){\n            expect(a.features.length).toBeDefined();\n        });\n    });\n});\n",
			"file": "/C/nstavrakakis/HTMLStarterKitPro/test/specs/dev/welcome.spec.js",
			"file_size": 929,
			"file_write_time": 130408365930351403,
			"settings":
			{
				"buffer_size": 897,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/nstavrakakis/HTMLStarterKitPro/app/viewmodels/welcome.js",
			"settings":
			{
				"buffer_size": 1328,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/nstavrakakis/dashboard/app/viewmodels/shell.js",
			"settings":
			{
				"buffer_size": 801,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/nstavrakakis/dashboard/app/viewmodels/BaseChartModel.js",
			"settings":
			{
				"buffer_size": 362,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"",
				"Code Folding: Unfold All"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/nstavrakakis/dashboard/app/viewmodels/dashboard.js",
		"/C/nstavrakakis/HTMLStarterKitPro/app/viewmodels/shell.js",
		"/C/nstavrakakis/dashboard/app/views/dashboard.html",
		"/C/nstavrakakis/dashboard/app/views/labs.html",
		"/C/nstavrakakis/dashboard/app/main.js",
		"/C/nstavrakakis/dashboard/index.html",
		"/C/nstavrakakis/dashboard/app/viewmodels/shell.js",
		"/C/nstavrakakis/dashboard/app/viewmodels/labs.js",
		"/C/nstavrakakis/dashboard/app/views/shell.html",
		"/C/nstavrakakis/dashboard/css/site.css",
		"/C/nstavrakakis/odata/scripts/oDataExplorer.js",
		"/C/nstavrakakis/dashboard/app/viewmodels/BaseChartModel.js",
		"/C/nstavrakakis/odata/index.html",
		"/C/nstavrakakis/dashboard/Gruntfile.js",
		"/C/nstavrakakis/dashboard/test/specs/dev/BaseChartModel.spec.js",
		"/C/nstavrakakis/dashboard/_SpecRunner.html",
		"/C/nstavrakakis/dashboard/test/specs/dev/welcome.spec.js",
		"/C/nstavrakakis/dashboard/test/specs/dev/dashboard.spec.js",
		"/C/nstavrakakis/dashboard/test/specs/dev/shell.spec.js",
		"/C/nstavrakakis/dashboard/test/specs/dev/flickr.spec.js",
		"/C/nstavrakakis/dashboard/test/specs/dev/customdashboard.spec.js",
		"/C/nstavrakakis/dashboard/test/specs/build/main.spec.js",
		"/C/nstavrakakis/dashboard/test/specs/dev/basechartmodel.spec.js",
		"/C/nstavrakakis/HTMLStarterKitPro/app/viewmodels/welcome.js",
		"/C/nstavrakakis/dashboard/build/app/main.js",
		"/C/nstavrakakis/dashboard/build/app/main-built.js",
		"/C/nstavrakakis/dashboard/test/specs/dev/customdashboard.spec",
		"/C/nstavrakakis/dashboard/app/js/main.js",
		"/C/nstavrakakis/dashboard/package.json",
		"/C/nstavrakakis/dashboard/gruntfile.js",
		"/C/nstavrakakis/dashboard/app/index.html",
		"/C/nstavrakakis/dashboard/app/shell.html",
		"/C/nstavrakakis/dashboard/app/home.html",
		"/C/nstavrakakis/dashboard/app/home.js",
		"/C/nstavrakakis/dashboard/app/shell.js",
		"/C/nstavrakakis/dashboard/app/dashboard.js",
		"/C/nstavrakakis/dashboard/app/dashboard.html",
		"/C/nstavrakakis/dashboard/app/js/shell.js",
		"/C/nstavrakakis/dashboard/app/js/lib/require/text.js",
		"/C/nstavrakakis/dashboard/app/js/libs/require.min.js",
		"/C/nstavrakakis/d3charts/package.json",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/DataTable.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/BaseChart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/StackedBarChart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/TimeLine.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/Group.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/RowChart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/PieChart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/Legend.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/PartitionChart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/Dimension.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/CountChart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/CircularPartitionChart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/ChartGroup.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/BarChart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/examples/barchart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/Gruntfile.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/BulletChart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/examples/barchart.html",
		"/C/Users/nstavrakakis/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/C/nstavrakakis/NuGet.Charts/d3charts/src/GroupedBarChart.js",
		"/C/nstavrakakis/NuGet.Charts/d3charts/package.json"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"self",
			"durandal",
			"connect",
			"durandal",
			"durandal:main",
			"ko",
			"\nvar CustomDashboard = function CustomDashboard() {\n\n    BaseChartModel.call(this);\n\n    var self = this;\n\n    this.MonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      \n}\n\nCustomDashboard.prototype = Object.create(BaseChartModel.prototype);\nCustomDashboard.prototype.constructor = CustomDashboard;\n\nCustomDashboard.prototype.load = function (service1, service2, service3) {\n    var self = this;\n    var q = queue().defer(d3.json, service1).defer(d3.json, service2).defer(d3.json, service3);\n\n    q.await(function (error, budgetResponse, targetResponse, revenueResponse) {\n\n        $('.loader').hide();\n\n        self.parseDates(budgetResponse, \"Date\");\n        self.parseDates(targetResponse, \"Date\");\n        self.parseDates(revenueResponse, \"Date\");\n\n        var today = new Date();\n\n        revenueResponse.forEach(function (item) {\n            if (item.Date < today) {\n                item.CurrentRevenueAdj = 0;\n                item.RenewalRevenueAdj = 0;\n                item.ProjectedRevenueAdj = 0;\n                item.ActualRevenueAdj = item.ActualRevenue;\n            }\n            else {\n                item.CurrentRevenueAdj = item.CurrentRevenue;\n                item.RenewalRevenueAdj = item.RenewalRevenue;\n                item.ProjectedRevenueAdj = item.ProjectedRevenue;\n                item.ActualRevenueAdj = 0;\n            }\n        });\n\n        var budgetData = crossfilter(budgetResponse);\n        var targetData = crossfilter(targetResponse);\n        var revenueData = crossfilter(revenueResponse);\n\n        var monthlyRevenueChartGroup = new ChartGroup(\"Revenue vs Budget\");\n\n        self.ChartGroups.push(monthlyRevenueChartGroup);\n\n\n        var timeDimension = monthlyRevenueChartGroup.addDimension(budgetData, \"Time\", function (x) { return x.Date; }, function (x) { var format = d3.time.format('%b %Y'); return format(x); });\n        var revenueTimeDimension = monthlyRevenueChartGroup.addDimension(revenueData, \"Time\", function (x) { return x.Date; }, function (x) { var format = d3.time.format('%b %Y'); return format(x); });\n        var targetTimeDimension = monthlyRevenueChartGroup.addDimension(targetData, \"Time\", function (x) { return x.Date; }, function (x) { var format = d3.time.format('%b %Y'); return format(x); });\n        \n        var clientDimension = monthlyRevenueChartGroup.addDimension(revenueData, \"Client\", function (x) { return x.Client; });\n        var roleDimension = monthlyRevenueChartGroup.addDimension(revenueData, \"Role\", function (x) { return x.Role; });\n        var headcountRoleDimension = monthlyRevenueChartGroup.addDimension(budgetData, \"Role\", function (x) { return x.Role; });\n        var officeDimension = monthlyRevenueChartGroup.addDimension(revenueData, \"Office\", function (x) { return x.Office; });\n\n\n        var yearDimension = monthlyRevenueChartGroup.addDimension(revenueData, \"Year\", function (x) { return x.Year; });\n        var targetYearDimension = monthlyRevenueChartGroup.addDimension(targetData, \"Year\", function (x) { return x.Year; });\n        var budgetYearDimension = monthlyRevenueChartGroup.addDimension(budgetData, \"Year\", function (x) { return x.Year; });\n\n        var quarterDimension = monthlyRevenueChartGroup.addDimension(revenueData, \"Quarter\", function (x) { return x.Year + \" - \" + x.Quarter; });\n        var targetQuarterDimension = monthlyRevenueChartGroup.addDimension(targetData, \"Quarter\", function (x) { return x.Year + \" - \" + x.Quarter; });\n        var budgetQuarterDimension = monthlyRevenueChartGroup.addDimension(budgetData, \"Quarter\", function (x) { return x.Year + \" - \" + x.Quarter; });\n\n\n        var filter2014 = function (d) {\n            return (new Date(2014, 11, 1) >= d.key && d.key >= new Date(2014, 0, 1));\n        };\n        \n        var headcountGroup = timeDimension.Dimension.group().reduce(\n                function (p, v) {\n                    p.CurrentHeadcount += v.CurrentHeadcount;\n                    p.RenewalHeadcount += v.RenewalHeadcount;\n                    p.ProjectedHeadcount += v.CurrentHeadcount + v.RenewalHeadcount;\n                    p.Budget += v.Budget;\n                    p.ChargeRate += v.ProjectedRevenue / v.ProjectedHeadcount / v.Profile;\n                    p.RevenueTargetHeadcount += v.Budget / (v.ProjectedRevenue / v.ProjectedHeadcount / v.Profile) / v.Profile;\n                    return p;\n                },\n                function (p, v) {\n                    p.CurrentHeadcount -= v.CurrentHeadcount;\n                    p.RenewalHeadcount -= v.RenewalHeadcount;\n                    p.ProjectedHeadcount -= v.CurrentHeadcount + v.RenewalHeadcount;\n                    p.Budget -= v.Budget;\n                    p.ChargeRate -= v.ProjectedRevenue / v.ProjectedHeadcount / v.Profile;\n                    p.RevenueTargetHeadcount -= v.Budget / (v.ProjectedRevenue / v.ProjectedHeadcount / v.Profile) / v.Profile;\n                    return p;\n                },\n                function (p, v) {\n                    return { RevenueTargetHeadcount: 0, Budget: 0, CurrentHeadcount: 0, RenewalHeadcount: 0, ProjectedHeadcount: 0, ChargeRate: 0 };\n                }\n            );\n\n        var values = ['CurrentRevenue', 'RenewalRevenue', 'ActualRevenue', 'CurrentRevenueAdj', 'RenewalRevenueAdj', 'ActualRevenueAdj'];\n\n        var yearGroup = monthlyRevenueChartGroup.multiReduceSum(yearDimension, values);\n        var timeGroup = monthlyRevenueChartGroup.multiReduceSum(revenueTimeDimension, values);\n        var quarterGroup = monthlyRevenueChartGroup.multiReduceSum(quarterDimension, values);\n\n        var clientGroup = monthlyRevenueChartGroup.multiReduceSum(clientDimension, values);\n        var officeGroup = monthlyRevenueChartGroup.multiReduceSum(officeDimension, values);\n        var roleGroup = monthlyRevenueChartGroup.multiReduceSum(roleDimension, values);\n\n        var cumulativeMonthGroup = monthlyRevenueChartGroup.multiReduceSum(revenueTimeDimension, values)\n            .cumulative(true)\n            .filterFunction(filter2014)\n            .valueAccessor(function (d) { return d.value; })\n            .calculateTotals();\n        \n        var targetYearGroup = targetYearDimension.Dimension.group().reduceSum(function (d) {\n            return d.Budget;\n        });\n\n        var targetTimeGroup = targetTimeDimension.Dimension.group().reduceSum(function (d) {\n            return d.Budget;\n        });\n\n        var targetQuarterGroup = targetQuarterDimension.Dimension.group().reduceSum(function (d) {\n            return d.Budget;\n        });\n\n        targetCumulativeMonthlyGroup = new Group(targetTimeGroup)\n                                                    .cumulative(true)\n                                                    .filterFunction(filter2014)\n                                                    .calculateTotals();\n\n        console.log(cumulativeMonthGroup.getData());\n\n        headcountGroup = new Group(headcountGroup);\n\n        targetYearGroup = new Group(targetYearGroup);\n        targetQuarterGroup = new Group(targetQuarterGroup);\n        targetTimeGroup = new Group(targetTimeGroup);\n\n        monthlyRevenueChartGroup.addCustomGrouping(yearGroup);\n        monthlyRevenueChartGroup.addCustomGrouping(clientGroup);\n        monthlyRevenueChartGroup.addCustomGrouping(officeGroup);\n        monthlyRevenueChartGroup.addCustomGrouping(roleGroup);\n        monthlyRevenueChartGroup.addCustomGrouping(quarterGroup);\n        monthlyRevenueChartGroup.addCustomGrouping(timeGroup);\n        monthlyRevenueChartGroup.addCustomGrouping(headcountGroup);\n        monthlyRevenueChartGroup.addCustomGrouping(targetYearGroup);\n        monthlyRevenueChartGroup.addCustomGrouping(targetQuarterGroup);\n\n        monthlyRevenueChartGroup.addCustomGrouping(cumulativeMonthGroup);\n        monthlyRevenueChartGroup.addCustomGrouping(targetCumulativeMonthlyGroup);\n\n\n        var stackedSeriesNoActual = [\n            {\n                name: 'current', label: 'Revenue', cumulative: function (d) { return d.value.CurrentRevenueAdjCumulative; }, calculation: function (d) { return d.value.CurrentRevenue; }, color: '#acc3ee'\n            },\n            {\n                name: 'renewals', label: 'Renewal', cumulative: function (d) { return d.value.RenewalRevenueAdjCumulative; }, calculation: function (d) { return d.value.RenewalRevenue; }, color: '#e67e22'\n            }\n        ];\n\n        var stackedSeries = [\n            {\n                name: 'current', label: 'Revenue', cumulative: function (d) { return d.value.CurrentRevenueAdjCumulative; }, calculation: function (d) { return d.value.CurrentRevenueAdj; }, color: '#acc3ee'\n            },\n            {\n                name: 'renewals', label: 'Renewal', cumulative: function (d) { return d.value.RenewalRevenueAdjCumulative; }, calculation: function (d) { return d.value.RenewalRevenueAdj; }, color: '#e67e22'\n            },\n            {\n                name: 'actuals', label: 'Actual', cumulative: function (d) { return d.value.ActualRevenueAdjCumulative; }, calculation: function (d) { return d.value.ActualRevenueAdj; }, color: 'silver'\n            }\n        ];\n\n        var cumulativeTargets =\n            {\n                name: 'budget',\n                label: 'Budget',\n                color: '#2c3e50',\n                calculation: function (d) { return d.valueCumulative; },\n                cumulative: function (d) { return d.valueCumulative; },\n                data: targetCumulativeMonthlyGroup\n            };\n\n        var budgetTargets =\n            {\n                name: 'budget',\n                label: 'Budget',\n                color: '#2c3e50',\n                calculation: function (d) { return d.value; },\n                setter: function (d, v) { d.value = v; },\n                data: targetYearGroup\n            };\n\n        var quarterTargets =\n            {\n                name: 'budget',\n                label: 'Budget',\n                color: '#2c3e50',\n                calculation: function (d) { return d.value; },\n                setter: function (d, v) { d.value = v; },\n                data: targetQuarterGroup\n            };\n        \n        var monthlyTargets = {\n            name: 'budget',\n            label: 'Budget',\n            color: '#2c3e50',\n            calculation: function (d) { return d.value; },\n            setter: function (d, v) { d.value = v; },\n            data: targetTimeGroup\n        };\n\n        var headcountSeries = [\n            {\n                name: 'current', label: 'Current', calculation: function (d) { return d.value.CurrentHeadcount; }, color: '#acc3ee'\n            },\n            {\n                name: 'renewals', label: 'Renewals', calculation: function (d) { return d.value.RenewalHeadcount; }, color: '#e67e22'\n            }\n        ]\n\n        var headcountTarget =\n            {\n                name: 'target',\n                label: 'Headcount Target',\n                color: '#2c3e50',\n                calculation: function (d) { return d.value.RevenueTargetHeadcount; },\n                data: headcountGroup\n            };\n\n        var currencyFormatter = function (value) {\n            var format = d3.format(\",f\");\n            return '£' + format(value);\n        }\n\n        var floatFormatter = function (value) {\n            var format = d3.format(\".1f\");\n            return format(value);\n        }\n\n\n        var yearBarChart = new BarChart('Yearly', \"#yearRow\", yearDimension, yearGroup)\n                                    .width(200)\n                                    .height(300)\n                                    .margin({ top: 20, left: 65, bottom: 70, right: 0 })\n                                    .barColor('#ACC3EE')\n                                    .tooltipFormat(currencyFormatter)\n                                    .tooltipLabel('Current')\n                                    .yAxisFormat(currencyFormatter)\n                                    .valueAccessor(function (d) { return d.value.CurrentRevenue + d.value.RenewalRevenue; })\n                                    .targets(budgetTargets);\n\n        var clientRowChart = new RowChart('Clients', \"#clientChart\", clientDimension, clientGroup)\n                                    .width(300)\n                                    .height(200)\n                                    .margin({ top: 0, left: 120, bottom: 0, right: 0 })\n                                    .barColor('#ACC3EE')\n                                    .redrawAxes(true)\n                                    .tooltipFormat(currencyFormatter)\n                                    .tooltipLabel('Current')\n                                    .yAxisFormat(currencyFormatter)\n                                    .valueAccessor(function (d) { return d.value.CurrentRevenue + d.value.RenewalRevenue; });\n\n        var roleRowChart = new RowChart('Roles', \"#roleChart\", roleDimension, roleGroup)\n                                    .width(300)\n                                    .height(200)\n                                    .redrawAxes(true)\n                                    .margin({ top: 0, left: 120, bottom: 0, right: 0 })\n                                    .barColor('#ACC3EE')\n                                    .tooltipFormat(currencyFormatter)\n                                    .tooltipLabel('Current')\n                                    .yAxisFormat(currencyFormatter)\n                                    .valueAccessor(function (d) { return d.value.CurrentRevenue + d.value.RenewalRevenue; });\n\n        var officeRowChart = new RowChart('Office', \"#officeChart\", officeDimension, officeGroup)\n                                    .width(300)\n                                    .height(200)\n                                    .margin({ top: 0, left: 120, bottom: 0, right: 0 })\n                                    .barColor('#ACC3EE')\n                                    .redrawAxes(true)\n                                    .tooltipFormat(currencyFormatter)\n                                    .tooltipLabel('Current')\n                                    .yAxisFormat(currencyFormatter)\n                                    .valueAccessor(function (d) { return d.value.CurrentRevenue + d.value.RenewalRevenue; });\n\n\n        var quarterRowChart = new StackedBarChart('Quarterly', \"#quarterRow\", quarterDimension, quarterGroup)\n                                    .width(200)\n                                    .height(300)\n                                    .margin({ top: 20, left: 60, bottom: 70, right: 0 })\n                                    .barColor('#ACC3EE')\n                                    .tooltipFormat(currencyFormatter)\n                                    .yAxisFormat(currencyFormatter)\n                                    .redrawAxes(true)\n                                    .addSeries(stackedSeries)\n                                    .targets(quarterTargets)\n                                    .limitFunction(function (d) {\n                                        var vals = d.key.split(\" - \");\n                                        return \"2014\" == vals[0];\n                                    });\n\n\n        var monthFormatter = function (d) { var format = d3.time.format(\"%b %Y\"); return format(d); };\n\n\n        var monthlyRowChart = new StackedBarChart('Monthly', \"#monthRow\", revenueTimeDimension, timeGroup)\n                                    .width(500)\n                                    .height(300)\n                                    .margin({ top: 20, left: 70, bottom: 80, right: 0 })\n                                    .barColor('#e67e22')\n                                    .tooltipFormat(currencyFormatter)\n                                    .yAxisFormat(currencyFormatter)\n                                    .redrawAxes(true)\n                                    .xAxisFormat(monthFormatter)\n                                    .addSeries(stackedSeries)\n                                    .targets(monthlyTargets)\n                                    .limitFunction(function (d) {\n                                        return (new Date(2014, 11, 1) >= d.key && d.key >= new Date(2013, 0, 1));\n                                    });\n\n\n        var headcountChart = new StackedBarChart('Headcount', \"#headcountChart\", timeDimension, headcountGroup)\n                                    .width(500)\n                                    .height(250)\n                                    .margin({ top: 20, left: 70, bottom: 80, right: 0 })\n                                    .barColor('#e67e22')\n                                    .redrawAxes(true)\n                                    .xAxisFormat(function (d) { var format = d3.time.format(\"%b %Y\"); return format(d); })\n                                    .addSeries(headcountSeries)\n                                    .tooltipFormat(floatFormatter)\n                                    .targets(headcountTarget)\n                                    .limitFunction(function (d) {\n                                        return (new Date(2014, 11, 1) >= d.key && d.key >= new Date(2013, 10, 1));\n                                    });\n\n        var cumulativeMonthBarChart = new StackedBarChart('Cumulative', \"#cumulativeMonth\", timeDimension, cumulativeMonthGroup)\n                                    .width(500)\n                                    .height(250)\n                                    .cumulative(true)\n                                    .margin({ top: 20, left: 70, bottom: 80, right: 0 })\n                                    .barColor('#e67e22')\n                                    .redrawAxes(true)\n                                    .tooltipFormat(currencyFormatter)\n                                    .yAxisFormat(currencyFormatter)\n                                    .xAxisFormat(function (d) {\n                                        var format = d3.time.format(\"%b %Y\"); return format(d);\n                                    })\n                                    .limitFunction(filter2014)\n                                    .addSeries(stackedSeriesNoActual)\n                                    .targets(cumulativeTargets);\n\n        var legend = new Legend('Legend', \"#legend\", yearDimension, stackedSeries)\n                                .width(100)\n                                .height(100)\n                                .displayName('');\n\n        monthlyRevenueChartGroup.addChart(legend);\n        monthlyRevenueChartGroup.addChart(yearBarChart);\n        monthlyRevenueChartGroup.addChart(clientRowChart);\n        monthlyRevenueChartGroup.addChart(roleRowChart);\n        monthlyRevenueChartGroup.addChart(officeRowChart);\n        monthlyRevenueChartGroup.addChart(quarterRowChart);\n        monthlyRevenueChartGroup.addChart(monthlyRowChart);\n        monthlyRevenueChartGroup.addChart(cumulativeMonthBarChart);\n        monthlyRevenueChartGroup.addChart(headcountChart);\n\n        monthlyRevenueChartGroup.initCharts();\n\n\n        $(\".row\").sortable({\n            connectWith: \".row\"\n        }).disableSelection();\n\n        $(\".customChart\").resizable();\n    });\n}\n\n\n$(document).ready(\n    function () {\n        var model = new CustomDashboard();\n\n        ko.applyBindings(model);\n\n        model.load(\"/api/budgetreport\", \"/api/budgettarget\", \"/api/revenuereport\");\n\n\n    }\n);",
			"loader",
			"drawTargets",
			"drawra",
			"draw",
			"barYPosition",
			"filterKey",
			"labelYPosition",
			"filterkey",
			"barYPosition",
			"labelYPosition",
			"invert",
			"labelAnchoring",
			"xAxisFormat",
			"xformatfun",
			"dataset",
			"filterKey",
			"series"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"_series"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/nstavrakakis/dashboard/test/specs/dev/flickr.spec.js",
					"settings":
					{
						"buffer_size": 948,
						"regions":
						{
						},
						"selection":
						[
							[
								129,
								943
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/nstavrakakis/dashboard/app/viewmodels/flickr.js",
					"settings":
					{
						"buffer_size": 1520,
						"regions":
						{
						},
						"selection":
						[
							[
								505,
								505
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/nstavrakakis/dashboard/test/specs/dev/dashboard.spec.js",
					"settings":
					{
						"buffer_size": 539,
						"regions":
						{
						},
						"selection":
						[
							[
								507,
								507
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/nstavrakakis/HTMLStarterKitPro/test/specs/dev/welcome.spec.js",
					"settings":
					{
						"buffer_size": 897,
						"regions":
						{
						},
						"selection":
						[
							[
								578,
								578
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/nstavrakakis/HTMLStarterKitPro/app/viewmodels/welcome.js",
					"settings":
					{
						"buffer_size": 1328,
						"regions":
						{
						},
						"selection":
						[
							[
								28,
								32
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/nstavrakakis/dashboard/app/viewmodels/shell.js",
					"settings":
					{
						"buffer_size": 801,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/nstavrakakis/dashboard/app/viewmodels/BaseChartModel.js",
					"settings":
					{
						"buffer_size": 362,
						"regions":
						{
						},
						"selection":
						[
							[
								54,
								54
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 214.0,
	"status_bar_visible": true
}
